let globalData = [];
let SalesData_0 = [];
let BS_0 = [];
let CF_0 = [];
let PL_0 = [];
let STOCK_0 = [];
let AP_0 = [];
let BU_0 = [];
let AR_0 = [];

// ‚è≥ –ö–æ–ª–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∞—Å—å
document.addEventListener("DOMContentLoaded", async () => {
  try {
    const response = await fetch('PO.xlsx');
    if (!response.ok) throw new Error(`–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${response.status}`);

    const buffer = await response.arrayBuffer();
    const workbook = XLSX.read(buffer, { type: 'array' });

    if (!workbook.SheetNames.length) {
      console.warn("‚ö†Ô∏è Excel –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –∂–æ–¥–Ω–æ–≥–æ –∞—Ä–∫—É—à–∞!");
      return;
    }

    // –ú–∞—Å–∏–≤ –∞—Ä–∫—É—à—ñ–≤ (–¥–≤–æ–≤–∏–º—ñ—Ä–Ω–∏—Ö –º–∞—Å–∏–≤—ñ–≤)
    globalData = workbook.SheetNames.flatMap(name =>
      XLSX.utils.sheet_to_json(workbook.Sheets[name], { header: 1 })
    );

    console.log("‚úÖ –î–∞–Ω—ñ –∑—á–∏—Ç–∞–Ω—ñ:", globalData);

    // üîπ –ù–∞—Ä—ñ–∑–∞—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ –∑–∞ –Ω–∞–∑–≤–∞–º–∏
    splitGlobalData(globalData);

    // üîπ –í–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ø–æ–∫–∞–∑–∞—Ç–∏ –ª–∏—à–µ –ø–µ—Ä—à—ñ 5 —Ä—è–¥–∫—ñ–≤ –∫–æ–∂–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ)
    if (typeof showTables === "function") {
      showTables([
        SalesData_0,
        BS_0,
        CF_0,
        PL_0,
        STOCK_0,
        AP_0,
        BU_0,
        AR_0
      ]);
    }

  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ Excel:", error);
  }
});


// ================================
// üß© –§–£–ù–ö–¶–Ü–Ø –ù–ê–†–Ü–ó–ö–ò –ì–õ–û–ë–ê–õ–¨–ù–ò–• –î–ê–ù–ò–•
// ================================
function splitGlobalData(globalData) {
  if (!Array.isArray(globalData)) {
    console.error("‚ùå globalData –º–∞—î –±—É—Ç–∏ –º–∞—Å–∏–≤–æ–º");
    return;
  }

  let currentName = null;
  let currentTable = [];

  for (let i = 0; i < globalData.length; i++) {
    const row = globalData[i];

    // –Ø–∫—â–æ —Ü–µ –Ω–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ (–ø–µ—Ä—à–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∞ ‚Äî —Ç–µ–∫—Å—Ç —É –≤–µ—Ä—Ö–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ –±–µ–∑ —Ü–∏—Ñ—Ä)
    if (row && typeof row[0] === "string" && /^[A-Z_]+$/.test(row[0].trim())) {
      if (currentName && currentTable.length > 0) {
        saveTable(currentName, currentTable);
      }

      currentName = row[0].trim();
      currentTable = [];
      continue;
    }

    if (currentName) {
      currentTable.push(row);
    }
  }

  // –ó–±–µ—Ä–µ–≥—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é —Ç–∞–±–ª–∏—Ü—é
  if (currentName && currentTable.length > 0) {
    saveTable(currentName, currentTable);
  }

  console.log("‚úÖ –¢–∞–±–ª–∏—Ü—ñ —Ä–æ–∑–¥—ñ–ª–µ–Ω–æ:");
  console.log({ SalesData_0, BS_0, CF_0, PL_0, STOCK_0, AP_0, BU_0, AR_0 });
}

// ================================
// üíæ –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –¢–ê–ë–õ–ò–¶–Ü
// ================================
function saveTable(name, data) {
  switch (name.toUpperCase()) {
    case "SALESDATA":
      SalesData_0 = data;
      break;
    case "BS":
      BS_0 = data;
      break;
    case "CF":
      CF_0 = data;
      break;
    case "PL":
      PL_0 = data;
      break;
    case "STOCK":
      STOCK_0 = data;
      break;
    case "AP":
      AP_0 = data;
      break;
    case "BU":
      BU_0 = data;
      break;
    case "AR":
      AR_0 = data;
      break;
    default:
      console.warn("‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ —Ç–∞–±–ª–∏—Ü—è:", name);
  }
}
