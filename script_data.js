let globalData = [];
let df = [];


document.addEventListener("DOMContentLoaded", async () => {
  try {
    const response = await fetch('Test.xlsx');
    if (!response.ok) throw new Error(`–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${response.status}`);

    const buffer = await response.arrayBuffer();
    const workbook = XLSX.read(buffer, { type: 'array' });

    if (!workbook.SheetNames.length) {
      console.warn("‚ö†Ô∏è Excel –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –∂–æ–¥–Ω–æ–≥–æ –∞—Ä–∫—É—à–∞!");
    }

    // –ú–∞—Å–∏–≤ –∞—Ä–∫—É—à—ñ–≤
    globalData = workbook.SheetNames.map(name =>
      XLSX.utils.sheet_to_json(workbook.Sheets[name], { header: 1 })
    );

    console.log("‚úÖ –î–∞–Ω—ñ –∑—á–∏—Ç–∞–Ω—ñ:", globalData);

    // üîÅ –û–±‚Äô—î–¥–Ω—É—î–º–æ –≤—Å—ñ –∞—Ä–∫—É—à—ñ –≤ –æ–¥–∏–Ω –º–∞—Å–∏–≤
    let combinedData = globalData.flat();
    console.log("üîÅ –û–±‚Äô—î–¥–Ω–∞–Ω—ñ –¥–∞–Ω—ñ:", combinedData);

    // 2Ô∏è‚É£ –°—Ç–≤–æ—Ä—é—î–º–æ DataFrame
    function createDataFrame(data) {
      if (!data.length) return [];
      const headers = data[0];
      const rows = data.slice(1);
      return rows.map(row => {
        const obj = {};
        headers.forEach((h, i) => obj[h] = row[i] ?? null);
        return obj;
      });
    }

    let df = createDataFrame(combinedData);
    console.log("üìä DataFrame:", df);
    // üîπ –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫–∞
    if (typeof initCharts === "function") initCharts(df);



    // üîπ –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ø–æ–∫–∞–∑—É —Ç–∞–±–ª–∏—Ü—å
    if (typeof showTables === "function") {
      showTables(globalData);
    }



  
    

  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ Excel:", error);
  }
});
